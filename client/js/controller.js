// Generated by CoffeeScript 1.6.3
(function() {
  (angular.module('reitz')).controller('chartCtrl', function($scope, ngTableParams, $filter, $http, projectservice, chartService) {
    var generateChart, tableData;
    $scope.result = [];
    $scope.loading = true;
    $scope.colors = chartService.colors;
    $scope.updated = {
      backPlate: 0,
      shroudPlate: 0,
      blades: 0,
      hub: 0
    };
    $scope.getRow = function(data) {
      return $scope.row = data;
    };
    $scope.color = $scope.colors[2];
    $scope.changeDia = function(data) {
      return $scope.row.OuterBladeDiameter = Math.ceil(($scope.row.FanSpeed / data.FanSpeed) * $scope.row.OuterBladeDiameter);
    };
    $scope.selectedPlate = function(data) {
      var dia, factor, selected;
      console.log(chartService.postdata);
      selected = data.color.name.split('-');
      factor = data.color.factor.split('-');
      dia = Math.pow($scope.row.OuterBladeDiameter / 1000, 2);
      $scope.updated.backPlate = +chartService.postdata.MaterialDriveControls.Width * (parseFloat(selected[0]) * parseFloat(factor[0]) * dia);
      $scope.updated.shroudPlate = +chartService.postdata.MaterialDriveControls.Width * (parseFloat(selected[1]) * parseFloat(factor[1]) * dia);
      $scope.updated.blades = +chartService.postdata.MaterialDriveControls.Width * (parseFloat(selected[2]) * parseFloat(factor[2]) * dia);
      return $scope.updated.hub = +chartService.postdata.MaterialDriveControls.Width * (parseFloat(selected[0]) * data.color.hub * dia);
    };
    generateChart = function(result) {
      var chartData;
      chartData = {
        series: [],
        speed: [],
        efficiency: [],
        shaftPower: [],
        nomenclature: [],
        nominalsize: []
      };
      _.map(_.range(10), function(i) {
        chartData.series.push(result[i].Series);
        chartData.speed.push(result[i].FanSpeed);
        chartData.efficiency.push(result[i].Efficiency);
        chartData.shaftPower.push(result[i].FanShaftPower);
        chartData.nominalsize.push(result[i].NominalSize);
        return chartData.nomenclature.push(result[i].Nomenclature);
      });
      return $scope.renderChart = {
        barChart: {
          chart: {
            type: 'column',
            width: 550
          },
          title: {
            text: 'Ri-vent'
          },
          xAxis: {
            categories: chartData.series
          },
          series: [
            {
              name: "Speed",
              data: chartData.speed
            }, {
              name: "Efficiency",
              data: chartData.efficiency
            }, {
              name: "Fan Shaft Power",
              data: chartData.shaftPower
            }
          ],
          legend: {
            enabled: true
          }
        },
        lineChart: {
          chart: {
            type: "line",
            width: 550
          },
          title: {
            text: 'Ri-vent'
          },
          xAxis: {
            categories: chartData.speed
          },
          yAxis: {
            categories: chartData.efficiency
          },
          series: [
            {
              name: "Nomenclature",
              data: chartData.nomenclature
            }, {
              name: "Efficiency",
              data: chartData.efficiency
            }
          ],
          legend: {
            enabled: true
          }
        }
      };
    };
    tableData = function() {
      return $scope.tableParams = new ngTableParams({
        page: 1,
        count: 10,
        filter: {
          Series: ''
        },
        sorting: {
          Efficiency: 'desc'
        }
      }, {
        counts: [],
        total: 0,
        getData: (function($defer, params) {
          var filteredData, orderedData;
          filteredData = params.filter() ? $filter('filter')($scope.result, params.filter()) : $scope.result;
          console.log(filteredData);
          orderedData = params.sorting() ? $filter('orderBy')(filteredData, params.orderBy()) : $scope.result;
          params.total(orderedData.length);
          return $defer.resolve(orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count()));
        }),
        $scope: $scope
      });
    };
    return $http.post('/api/postdata', JSON.stringify(projectservice.createJson(chartService.postdata))).success(function(result) {
      if (result.length) {
        result = _.sortBy(result, 'Efficiency').reverse();
        $scope.result = result;
        tableData();
        generateChart(result);
        $scope.loading = false;
      } else {

      }
      return $scope.loading = false;
    });
  }).directive('highchart', function() {
    return {
      restrict: 'E',
      template: '<div></div>',
      render: true,
      link: function(scope, element, attr) {
        return scope.$watch((function() {
          return attr.chart;
        }), function() {
          var charts;
          if (!attr.chart) {
            return;
          }
          charts = JSON.parse(attr.chart);
          return $(element[0]).highcharts(charts);
        });
      }
    };
  });

}).call(this);

/*
//@ sourceMappingURL=controller.map
*/
