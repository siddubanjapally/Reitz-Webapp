// Generated by CoffeeScript 1.6.3
(function() {
  (angular.module('reitz')).controller('NewProjectController', function($scope, $route, $location, $rootScope, projectservice, ReitzResources, chartService) {
    $scope.inletSilencer = ReitzResources.multiunitsdata.query();
    $scope.mode = 0;
    if ($rootScope.flag === 0) {
      $scope.data = {
        Proposal_OrderNo: '',
        GasOperatingPoint: {
          T: '0',
          P1: '0',
          F: '0'
        },
        FanAssemblies: {
          InletSoundSilencer: '0',
          EvaseOutlet_InletAreaRatio: '0',
          InletBox: '0',
          OutletSilencer: '0',
          OutletOtherParts: '0',
          InletOtherParts: '0',
          PressureDifference: '0'
        },
        GasDatas: {
          BarometricPressure_Elevation: 0.0,
          GasDustload: 0,
          VpUnit: '60',
          DptUnit: '10',
          VpUnits: 'M3/S',
          DptUnits: 'PA'
        },
        MaterialDriveControls: {
          DesignType: null,
          Width: '1',
          BackBlades: false,
          StandardImpellerMaterial: true,
          IECStandardMotor: false,
          NominalMotorSpeed: null,
          MotorSpeed: 0,
          MotorPower: 0,
          NoiseDataRequired: 0,
          MaterialYieldStrength: 0,
          IVCPosition: false,
          Drive: 'K',
          MaterialName: null,
          MaterialDensity: '',
          direct: true
        },
        Noises: {
          Design: 0,
          FanLocation: 0,
          HousingMaterial: null,
          RoomAbsorptionArea: '0',
          HousingMetalPlateThickness: '0',
          DistanceBetweenStiffners: null,
          BackgroundNoiseCorrection: '0'
        },
        GasOperatingPoints: []
      };
      console.log(projectservice.data);
      $scope.opbtn = true;
    } else {
      $scope.data = projectservice.editdata;
      $scope.opbtn = true;
    }
    $scope.$watch('data.MaterialDriveControls.MechanicalDesignTemperature > 350', (function(value) {
      if (value) {
        return $scope.data.MaterialDriveControls.StandardImpellerMaterial = false;
      } else {
        return $scope.data.MaterialDriveControls.StandardImpellerMaterial = true;
      }
    }), true);
    $scope.$watch('data.MaterialDriveControls.Drive ', (function(value) {
      if (value === "K") {
        $scope.data.MaterialDriveControls.direct = true;
        return $scope.data.MaterialDriveControls.IECStandardMotor = false;
      } else {
        $scope.data.MaterialDriveControls.direct = false;
        return $scope.data.MaterialDriveControls.IECStandardMotor = true;
      }
    }), true);
    $scope.$watch('data.GasOperatingPoint.T', (function(value) {
      return $scope.data.GasOperatingPoint.Vi = projectservice.density(value);
    }), true);
    $scope.$watch('data.MaterialDriveControls.Control ', (function(value) {
      if (value === "1") {
        return $scope.data.MaterialDriveControls.IVCPosition = true;
      } else {
        return $scope.data.MaterialDriveControls.IVCPosition = false;
      }
    }), true);
    $scope.lines = {
      faninlet: false,
      fanoutlet: false,
      onlyfan: false,
      onlyinlet: false
    };
    $scope.chb = {
      At: true,
      Ro: false
    };
    $scope.$watch('data.GasOperatingPoint.Atcheck', (function(value) {
      if (value) {
        $scope.chb.At = false;
        $scope.chb.Ro = true;
        return $scope.data.GasOperatingPoint.Alt = null;
      } else {
        $scope.chb.At = true;
        $scope.chb.Ro = false;
        return $scope.data.GasOperatingPoint.Ro = null;
      }
    }), true);
    $scope.$watch('data.FanAssemblies.PressureDifference', (function(value) {
      if (value === '1') {
        $scope.lines.fanoutlet = true;
        $scope.lines.faninlet = false;
        $scope.lines.onlyinlet = true;
        return $scope.lines.onlyfan = false;
      } else if (value === '2') {
        $scope.lines.faninlet = true;
        $scope.lines.fanoutlet = false;
        return $scope.lines.onlyfan = false;
      } else if (value === '3') {
        $scope.lines.fanoutlet = true;
        $scope.lines.faninlet = true;
        return $scope.lines.onlyfan = true;
      } else {
        $scope.lines.fanoutlet = false;
        $scope.lines.faninlet = false;
        $scope.lines.onlyinlet = false;
        return $scope.lines.onlyfan = false;
      }
    }), true);
    $scope.projectInfo = function() {
      return $location.path('/newproject');
    };
    $scope.operatingPoint = function() {
      return $location.path('/operatingPoint');
    };
    $scope.fanAssembling = function() {
      return $location.path('/fanAssembling');
    };
    $scope.materialControl = function() {
      return $location.path('/materialControl');
    };
    $scope.noiseData = function() {
      return $location.path('/noiseData');
    };
    $scope.createProject = function(data) {
      $scope.data.GasOperatingPoints.push($scope.data.GasOperatingPoint);
      chartService.postdata = $scope.data;
      $scope.data = null;
      return $location.path('/chartview');
    };
    $scope.addOperatingPoint = function(dummy) {
      if (dummy === void 0) {
        $scope.data.GasOperatingPoints.push($scope.data.GasOperatingPoint);
        return $scope.data.GasOperatingPoint = {
          T: 0,
          F: 0,
          P1: 0
        };
      } else {
        $scope.data.GasOperatingPoints[dummy] = $scope.data.GasOperatingPoint;
        return $scope.data.GasOperatingPoint = {
          T: 0
        };
      }
    };
    $scope.showGoPoints = function(op, index) {
      $scope.opbtn = false;
      $scope.indexSet = index;
      return $scope.data.GasOperatingPoint = op;
    };
    $scope.updateGoPoint = function() {
      $scope.opbtn = true;
      return $scope.addOperatingPoint($scope.indexSet);
    };
    return $scope.calculateDensity = function() {
      var Alt, T, condition, operate;
      condition = $scope.data.GasDatas.DptUnits;
      operate = $scope.data.GasOperatingPoint.Dpt;
      Alt = $scope.data.GasOperatingPoint.Alt;
      T = $scope.data.GasOperatingPoint.T;
      return $scope.data.GasOperatingPoint.Ro = projectservice.calculateDensity(condition, operate, Alt, T);
    };
  });

}).call(this);

/*
//@ sourceMappingURL=NewProjectController.map
*/
